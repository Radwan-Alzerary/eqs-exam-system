<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>اليوم الافتراضي - <%= dayName %></title>

  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>

  <style>
    body {
      font-family: 'Tajawal', sans-serif;
    }

    /* تنسيق النافذة المنبثقة (المودال) */
    #viewerModal {
      justify-content: center;
      align-items: center;
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.9);
      z-index: 9999;
      overflow: hidden;
    }

    /* زر الإغلاق */
    #closeBtn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: red;
      color: white;
      padding: 10px 15px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #closeBtn:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    /* زر التنزيل */
    #downloadBtn {
      position: absolute;
      top: 10px;
      left: 10px;
      background: #1d4ed8;
      /* درجة من الأزرق */
      color: white;
      padding: 10px 15px;
      border-radius: 5px;
      text-decoration: none;
      /* لأنه رابط */
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }

    #downloadBtn:hover {
      background: #2563eb;
      /* درجة أفتح من الأزرق */
    }

    video {
      width: 20%;
      max-width: 300px;
      border: 2px solid #12A9B0;
      border-radius: 8px;
      margin-bottom: 10px;
    }

    /* ==================================
       كاميرا مودال
       ================================== */
    #cameraModal {
      position: fixed;
      inset: 0;
      display: none;
      /* initially hidden */
      justify-content: center;
      align-items: center;
      background: rgba(0, 0, 0, 0.7);
      z-index: 9999;
      padding: 20px;
    }

    #cameraModal.active {
      display: flex;
      /* show when active */
    }

    .camera-modal-content {
      background-color: #fff;
      border-radius: 8px;
      padding: 20px;
      width: 90%;
      max-width: 500px;
      text-align: center;
      position: relative;
    }

    .close-camera-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: red;
      color: white;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
      border: none;
    }

    .close-camera-btn:hover {
      background: #ff4c4c;
    }

    /* أزرار الكاميرا */
    .btn {
      padding: 10px 20px;
      margin: 10px;
      border: none;
      border-radius: 5px;
      background-color: #007bff;
      color: white;
      cursor: pointer;
    }

    .btn:hover {
      background-color: #0056b3;
    }

    #error {
      color: red;
      margin-top: 10px;
    }
  </style>
</head>

<body class="bg-gray-100 min-h-screen">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-800 mb-8">
      الملفات في اليوم الافتراضي: <%= dayName %>
    </h1>

    <!-- زر فتح كاميرا مودال -->
    <button class="btn bg-green-600 hover:bg-green-700" onclick="openCameraModal()">
      تسجيل الحضور (كاميرا)
    </button>

    <!-- زر لاختيار ملف لرمز QR -->
    <p class="mt-4 text-gray-700">
      أو اختر صورة تحتوي على رمز QR:
    </p>
    <button class="btn bg-blue-600 hover:bg-blue-700" onclick="document.getElementById('fileInput').click()">
      اختر ملف QR
    </button>
    <input 
    type="file" 
    id="fileInput" 
    accept="image/*" 
    capture="environment" 
    style="display:none;"
  />

    <!-- قائمة الملفات -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mt-8">
      <% files.forEach(fileName => {
          const ext = fileName.split('.').pop().toLowerCase();

          // تعيين نوع الملف (type) لعرضه في <embed>
          let fileType, embedType;
          switch (ext) {
            case 'pdf':
              fileType = 'مستند PDF';
              embedType = 'application/pdf';
              break;
            case 'mp4':
              fileType = 'فيديو MP4';
              embedType = 'video/mp4';
              break;
            case 'mov':
              fileType = 'فيديو MOV';
              embedType = 'video/quicktime';
              break;
            case 'mp3':
              fileType = 'صوت MP3';
              embedType = 'audio/mpeg';
              break;
            case 'wav':
              fileType = 'صوت WAV';
              embedType = 'audio/wav';
              break;
            case 'jpg':
            case 'jpeg':
              fileType = 'صورة JPEG';
              embedType = 'image/jpeg';
              break;
            case 'png':
              fileType = 'صورة PNG';
              embedType = 'image/png';
              break;
            case 'gif':
              fileType = 'صورة GIF';
              embedType = 'image/gif';
              break;
            default:
              // أنواع أخرى غير معروفة
              fileType = 'نوع ملف غير معروف';
              embedType = 'application/octet-stream';
              break;
          }
      %>
      <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="p-6">
          <h3 class="text-lg font-semibold text-gray-800 mb-2 truncate">
            <%= fileName %>
          </h3>
          <p class="text-sm text-gray-600 mb-4">
            <%= fileType %>
          </p>
          <div class="flex justify-between">
            <!-- زر لفتح الـ Modal وعرض الملف -->
            <button onclick="openViewer(
              '/cloud/view/<%= dayName %>/<%= fileName %>', 
              '<%= embedType %>', 
              '<%= fileName %>'
            )" class="text-green-500 hover:text-green-600">
              عرض <i>👁️</i>
            </button>
          </div>
        </div>
      </div>
      <% }) %>
    </div>
  </div>

  <!-- النافذة المنبثقة (Modal) لعرض الملف -->
  <div id="viewerModal" class="hidden flex">
    <!-- زر الإغلاق -->
    <button id="closeBtn" onclick="closeViewer()">إغلاق</button>

    <!-- زر التنزيل (رابط تحميل) -->
    <a id="downloadBtn" href="#" download>تنزيل</a>

    <!-- تضمين الملف هنا -->
    <embed id="fileEmbed" src="" type="" class="mx-auto my-auto w-11/12 h-5/6">
  </div>

  <!-- كاميرا مودال -->
  <div id="cameraModal">
    <div class="camera-modal-content">
      <!-- زر إغلاق الكاميرا -->
      <button class="close-camera-btn" onclick="closeCameraModal()">إغلاق</button>

      <div id="response" style="color:red; margin-bottom: 10px;"></div>

      <div>
        <button id="toggle-camera-btn" class="btn">Switch Camera</button>
        <button id="manual-check-btn" class="btn">Manual Check</button>
      </div>

      <video id="video" autoplay style="width: 100%;"></video>
      <div id="output" style="margin-top: 10px;">جاري تهيئة الكاميرا...</div>
      <div id="error"></div>
    </div>
  </div>

  <!-- jsQR library -->
  <script src="https://cdn.jsdelivr.net/npm/jsqr"></script>

  <script>
    // ------------- Variables -------------
    const video = document.getElementById('video');
    const output = document.getElementById('output');
    const responseOutput = document.getElementById('response');
    const error = document.getElementById('error');
    const toggleCameraBtn = document.getElementById('toggle-camera-btn');
    const manualCheckBtn = document.getElementById('manual-check-btn');
    const cameraModal = document.getElementById('cameraModal');
    const fileInput = document.getElementById('fileInput');

    let useEnvironmentCamera = true; // Track which camera to use
    let currentStream = null;       // Store the active camera stream
    let lastScannedCode = null;     // Avoid repeating POST requests
    let scanning = false;           // Controls scanning loop

    // ------------- Modal Controls -------------
    function openCameraModal() {
      // Show the modal
      cameraModal.classList.add('active');
      // Start the camera
      startCamera('environment');
    }

    function closeCameraModal() {
      // Hide the modal
      cameraModal.classList.remove('active');
      // Stop the camera
      stopStream();
      // Reset scanning
      scanning = false;
      lastScannedCode = null;
    }

    // ------------- Camera Access -------------
    // Stop existing stream
    function stopStream() {
      if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
      }
      currentStream = null;
    }

    // Request camera access with specified facingMode
    async function startCamera(facingMode = 'environment') {
      stopStream();
      output.textContent = 'جاري تهيئة الكاميرا...';
      error.textContent = '';
      scanning = false;  // ensure a fresh start

      try {
        const constraints = {
          video: {
            facingMode: { ideal: facingMode } // استخدم ideal بدل exact لتفادي OverconstrainedError
          }
        };
        const stream = await navigator.mediaDevices.getUserMedia(constraints);
        currentStream = stream;
        video.srcObject = stream;
        scanning = true;
        // Kick off scanning loop
        scanQRCodeLoop();
      } catch (err) {
        console.warn('Preferred camera failed, trying fallback:', err);
        try {
          const fallbackStream = await navigator.mediaDevices.getUserMedia({ video: true });
          currentStream = fallbackStream;
          video.srcObject = fallbackStream;
          scanning = true;
          scanQRCodeLoop();
        } catch (fallbackErr) {
          showError(fallbackErr);
        }
      }
    }

    // Switch camera
    toggleCameraBtn.addEventListener('click', () => {
      useEnvironmentCamera = !useEnvironmentCamera;
      const mode = useEnvironmentCamera ? 'environment' : 'user';
      startCamera(mode);
    });

    // Display errors
    function showError(err) {
      console.error('Camera Error: ', err);
      error.textContent = 'Unable to access the camera: ' + err.message;
    }

    // ------------- QR Scanning -------------
    function scanQRCodeLoop() {
      if (!scanning) return;

      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');

      const scan = () => {
        if (!scanning) return; // stop scanning if we are not in scanning mode
        if (video.readyState === video.HAVE_ENOUGH_DATA) {
          canvas.width = video.videoWidth;
          canvas.height = video.videoHeight;
          context.drawImage(video, 0, 0, canvas.width, canvas.height);

          // Decode QR
          const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
          const code = jsQR(imageData.data, canvas.width, canvas.height);

          if (code && code.data && code.data !== lastScannedCode) {
            lastScannedCode = code.data;
            output.textContent = `QR Code Detected: ${code.data}`;
            postToServer(code.data);
          } else if (!code) {
            output.textContent = 'Scanning...';
          }
        }
        setTimeout(scan, 500);
      };
      scan();
    }

    // Manual Check (captures one frame and tries to decode)
    manualCheckBtn.addEventListener('click', () => {
      if (video.readyState !== video.HAVE_ENOUGH_DATA) {
        output.textContent = 'Camera not ready yet!';
        return;
      }
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
      const code = jsQR(imageData.data, canvas.width, canvas.height);

      if (code && code.data) {
        output.textContent = `Manual QR Code: ${code.data}`;
        postToServer(code.data);
      } else {
        output.textContent = 'No QR code found in the captured image.';
      }
    });

    // ------------- POST data to server -------------
    function postToServer(qrData) {
      fetch('/qr/usercheck/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ qrData })
      })
        .then(response => response.json())
        .then(data => {
          console.log('Server response:', data);
          if (data.isValid === false) {
            responseOutput.style.color = 'red';
            responseOutput.textContent = `ال QR منتهي او غير صالح`;
            const fileInput = document.getElementById('fileInput');
            fileInput.value = ''; // This clears the selected file

          } else {
            responseOutput.style.color = 'green';
            responseOutput.textContent = `مرحبا استاذ ${data.name} تم تسجيل الحضور بنجاح`;
            alert(`مرحبا استاذ ${data.name} تم تسجيل الحضور بنجاح`)
            const fileInput = document.getElementById('fileInput');
            fileInput.value = ''; // This clears the selected file

          }
        })
        .catch(err => {
          console.error('Error posting QR data:', err);
        });
    }

    // ------------- File Input Fallback -------------
    fileInput.addEventListener('change', handleFileSelect);

    function handleFileSelect(event) {
      console.log(event)
      const file = event.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = function (e) {
        const img = new Image();
        img.onload = function () {
          // الرسم على Canvas
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          canvas.width = img.width;
          canvas.height = img.height;
          context.drawImage(img, 0, 0, canvas.width, canvas.height);

          // تحضير بيانات الصورة للاستخدام في jsQR
          const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
          const code = jsQR(imageData.data, canvas.width, canvas.height);

          if (code && code.data) {
            output.textContent = `File QR Code: ${code.data}`;
            postToServer(code.data);
          } else {
            output.textContent = 'لم يتم العثور على رمز QR في الصورة.';
          }
        };
        img.src = e.target.result;
      };
      reader.readAsDataURL(file);
    }
  </script>

  <!-- عرض الملفات في الـ Modal (للعرض والتنزيل) -->
  <script>
    /**
     * فتح المودال وتضمين الملف في الـ embed + إعداد زر التنزيل
     * @param {string} fileUrl  المسار الكامل للملف
     * @param {string} mimeType نوع MIME (مثل application/pdf)
     * @param {string} fileName اسم الملف للتحميل
     */
    function openViewer(fileUrl, mimeType, fileName) {
      const modal = document.getElementById('viewerModal');
      const fileEmbed = document.getElementById('fileEmbed');
      const downloadBtn = document.getElementById('downloadBtn');

      // تعيين src و type في الـ <embed>
      fileEmbed.src = fileUrl;
      fileEmbed.type = mimeType;

      // تجهيز رابط التنزيل
      downloadBtn.href = fileUrl;
      // تحديد اسم الملف في "download" لجعله يظهر عند الحفظ
      downloadBtn.setAttribute('download', fileName);

      // إظهار النافذة المنبثقة
      modal.classList.remove('hidden');
    }

    // دالة لإغلاق الـ Modal
    function closeViewer() {
      const modal = document.getElementById('viewerModal');
      const fileEmbed = document.getElementById('fileEmbed');
      const downloadBtn = document.getElementById('downloadBtn');

      // إخفاء النافذة المنبثقة
      modal.classList.add('hidden');

      // إفراغ الـ src و الـ type عند الإغلاق (اختياري للتنظيف)
      fileEmbed.src = "";
      fileEmbed.type = "";

      // إعادة زر التنزيل إلى حالته الافتراضية
      downloadBtn.href = "#";
      downloadBtn.removeAttribute('download');
    }
  </script>
</body>

</html>
